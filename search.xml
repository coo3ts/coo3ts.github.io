<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>3TS-Coo</title>
    <url>/index/</url>
    <content><![CDATA[<h2 id="3TS-Coo"><a href="#3TS-Coo" class="headerlink" title="3TS-Coo"></a>3TS-Coo</h2><p><img src="/index/images/logo.png"></p>
<p>3TS-Coo is a consistency check tool for transactional databases. Coo checks the consistency of databases in accurate (all types of anomalies), user-friendly (SQL-based test), and cost-effective (one-time checking in a few minutes) ways. You can check out the code and detailed result on <a href="https://github.com/Tencent/3TS/tree/coo-consistency-check">GitHub</a> branch. Contributions in any kind are welcome.</p>
<p>The original and executed schedules are available for analysis and debugging. You can click each hyperlink for more detailed test cases and executed results. The <a href="/result/docs/coo_anomaly_cookbook.pdf">formal expressions</a> of test cases are also available. </p>
<p>The result behaviors are classified into two types, i.e., anomaly (A) and consistency. For anomaly occurrence, data anomalies are not recognized by databases, resulting in data inconsistencies, meaning the executed schedule with no equivalent serializable execution (or a <a href="/result/docs/coo_pop_model.pdf">Partial Order Pair (POP) cycle</a>). While for the consistent performance, databases either pass (P) the anomaly test cases with a serializable result (no POP cycle) or rollback transactions due to rules (R), deadlock detection (D), or timeout (T) reached. The isolation levels are Serializable (SER), Repeatable Read (RR), Read Committed (RC), Read Uncommitted (RU), and Snapshot Isolation (SI).</p>
<h3 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h3><p>We are testing the scenarios with predicates. Please stay tuned!</p>
]]></content>
  </entry>
</search>
